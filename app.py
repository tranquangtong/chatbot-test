import streamlit as st
from transformers import AutoTokenizer, AutoModelForCausalLM
import torch
from datetime import datetime

# Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ v√† CSS t√πy ch·ªânh - PH·∫¢I ƒê·∫∂T ƒê·∫¶U TI√äN
st.set_page_config(page_title="Chatbot AI", page_icon="ü§ñ", layout="wide")

# CSS t√πy ch·ªânh cho giao di·ªán chat
st.markdown("""
<style>
/* Thi·∫øt l·∫≠p layout t·ªïng th·ªÉ */
.main {
    display: flex;
    flex-direction: column;
    height: 100vh;
    padding: 0 !important;
    max-width: 100% !important;
}

/* Lo·∫°i b·ªè padding m·∫∑c ƒë·ªãnh c·ªßa Streamlit */
.block-container {
    padding: 0 !important;
    max-width: 100% !important;
}

/* ƒê·ªãnh d·∫°ng header */
.header {
    background-color: #f8f9fa;
    padding: 1rem;
    border-bottom: 1px solid #e9ecef;
    position: sticky;
    top: 0;
    z-index: 100;
    width: 100%;
}

/* ƒê·ªãnh d·∫°ng khu v·ª±c chat */
.chat-area {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

/* ƒê·ªãnh d·∫°ng footer */
.footer {
    background-color: #f8f9fa;
    padding: 1rem;
    border-top: 1px solid #e9ecef;
    position: sticky;
    bottom: 0;
    width: 100%;
}

/* ƒê·ªãnh d·∫°ng tin nh·∫Øn */
.user-message {
    background-color: #e6f7ff;
    padding: 10px;
    border-radius: 15px 15px 15px 0;
    margin: 5px 0;
    align-self: flex-start;
    max-width: 80%;
}

.bot-message {
    background-color: #f0f0f0;
    padding: 10px;
    border-radius: 15px 15px 0 15px;
    margin: 5px 0;
    align-self: flex-end;
    max-width: 80%;
}

.message-content {
    word-wrap: break-word;
}

.timestamp {
    font-size: 0.8em;
    color: gray;
    margin-top: 5px;
}

/* ·∫®n c√°c ph·∫ßn t·ª≠ kh√¥ng c·∫ßn thi·∫øt */
.stDeployButton, .viewerBadge, .css-1dp5vir, .css-1n76uvr {
    display: none !important;
}

/* ƒê·ªãnh d·∫°ng n√∫t v√† form */
.stButton button {
    width: 100%;
}

/* ·∫®n footer c·ªßa Streamlit */
footer {
    display: none !important;
}

/* Lo·∫°i b·ªè padding c·ªßa c√°c container */
.element-container {
    margin-bottom: 0 !important;
}

/* Lo·∫°i b·ªè border c·ªßa input */
.stTextInput input {
    border: 1px solid #e9ecef;
    border-radius: 20px;
    padding: 10px 15px;
}

/* ƒê·ªãnh d·∫°ng n√∫t x√≥a l·ªãch s·ª≠ */
.clear-button {
    text-align: center;
    margin-top: 0.5rem;
}
.clear-button button {
    background-color: transparent;
    color: #6c757d;
    border: 1px solid #6c757d;
    border-radius: 20px;
    padding: 5px 10px;
    font-size: 0.8rem;
}
</style>
""", unsafe_allow_html=True)

# T·∫£i tokenizer v√† m√¥ h√¨nh tr∆∞·ªõc khi kh·ªüi ƒë·ªông ·ª©ng d·ª•ng
@st.cache_resource
def load_model():
    tokenizer = AutoTokenizer.from_pretrained("microsoft/DialoGPT-small")
    model = AutoModelForCausalLM.from_pretrained("microsoft/DialoGPT-small")
    return tokenizer, model

tokenizer, model = load_model()

def chatbot(user_input, chat_history_ids, tokenizer, model):
    # M√£ h√≥a ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng
    new_user_input_ids = tokenizer.encode(user_input + tokenizer.eos_token, return_tensors="pt")

    # Th√™m ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠ tr√≤ chuy·ªán
    bot_input_ids = torch.cat([chat_history_ids, new_user_input_ids], dim=-1) if chat_history_ids is not None else new_user_input_ids

    # T·∫°o ph·∫£n h·ªìi c·ªßa chatbot
    chat_history_ids = model.generate(
        bot_input_ids,
        max_length=1000,
        pad_token_id=tokenizer.eos_token_id,
        no_repeat_ngram_size=3,
        do_sample=True,
        top_k=100,
        top_p=0.7,
        temperature=0.8
    )

    # Gi·∫£i m√£ ph·∫£n h·ªìi
    response = tokenizer.decode(chat_history_ids[:, bot_input_ids.shape[-1]:][0], skip_special_tokens=True)

    return response, chat_history_ids

# Kh·ªüi t·∫°o l·ªãch s·ª≠ chat trong session state n·∫øu ch∆∞a c√≥
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

if "chat_history_ids" not in st.session_state:
    st.session_state.chat_history_ids = None

# Header - Ti√™u ƒë·ªÅ c·ªë ƒë·ªãnh ·ªü ƒë·∫ßu trang
st.markdown('<div class="header"><h1>Chatbot AI ü§ñ</h1></div>', unsafe_allow_html=True)

# Khu v·ª±c hi·ªÉn th·ªã l·ªãch s·ª≠ chat
st.markdown('<div class="chat-area">', unsafe_allow_html=True)
for message in st.session_state.chat_history:
    if message["role"] == "user":
        st.markdown(f"""
        <div class="user-message">
            <div class="message-content">
                <b>B·∫°n:</b> {message["content"]}
                <div class="timestamp">{message["time"]}</div>
            </div>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown(f"""
        <div class="bot-message">
            <div class="message-content">
                <b>Chatbot:</b> {message["content"]}
                <div class="timestamp">{message["time"]}</div>
            </div>
        </div>
        """, unsafe_allow_html=True)
st.markdown('</div>', unsafe_allow_html=True)

# Footer - Khung nh·∫≠p tin nh·∫Øn c·ªë ƒë·ªãnh ·ªü d∆∞·ªõi c√πng
st.markdown('<div class="footer">', unsafe_allow_html=True)
with st.form(key="message_form", clear_on_submit=True):
    cols = st.columns([4, 1])
    with cols[0]:
        user_input = st.text_input("", placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n...", label_visibility="collapsed")
    with cols[1]:
        submit_button = st.form_submit_button("G·ª≠i")
    
    # N√∫t x√≥a l·ªãch s·ª≠ chat
    if st.form_submit_button("X√≥a l·ªãch s·ª≠ chat", type="secondary"):
        st.session_state.chat_history = []
        st.session_state.chat_history_ids = None
        st.rerun()
st.markdown('</div>', unsafe_allow_html=True)

# X·ª≠ l√Ω khi ng∆∞·ªùi d√πng g·ª≠i tin nh·∫Øn
if submit_button and user_input:
    # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
    current_time = datetime.now().strftime("%H:%M")
    st.session_state.chat_history.append({
        "role": "user",
        "content": user_input,
        "time": current_time
    })
    
    # L·∫•y ph·∫£n h·ªìi t·ª´ chatbot
    response, st.session_state.chat_history_ids = chatbot(
        user_input, 
        st.session_state.chat_history_ids, 
        tokenizer, 
        model
    )
    
    # Th√™m ph·∫£n h·ªìi c·ªßa chatbot v√†o l·ªãch s·ª≠
    st.session_state.chat_history.append({
        "role": "bot",
        "content": response,
        "time": current_time
    })
    
    # T·ª± ƒë·ªông rerun ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán
    st.rerun()

# JavaScript ƒë·ªÉ cu·ªôn xu·ªëng cu·ªëi c√πng c·ªßa container chat
st.markdown("""
<script>
    function scrollToBottom() {
        var chatArea = document.querySelector('.chat-area');
        if (chatArea) {
            chatArea.scrollTop = chatArea.scrollHeight;
        }
    }
    window.onload = scrollToBottom;
</script>
""", unsafe_allow_html=True)

